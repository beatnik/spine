.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.3
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SPINE::Base::Wiki 3pm"
.TH SPINE::Base::Wiki 3pm "2006-04-17" "perl v5.8.7" "User Contributed Perl Documentation"
.SH "NAME"
SPINE::Base::Wiki
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the Wiki base class for spine.
.PP
\&\s-1SPINE\s0 uses abstract classes to pass data from and to the database module and the handler. 
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use SPINE::DBI::Wiki;
.Ve
.PP
.Vb 3
\& my $wiki_dbi = SPINE::DBI::Wiki\->new($dbh); #Database handler
\& my $wiki = shift @{$wiki_dbi\->get({name=>"index.html"})}; 
\& if (!ref $wiki) { $wiki = SPINE::Base::Wiki::default();
.Ve
.PP
.Vb 2
\& #Print the body
\& print $wiki\->body;
.Ve
.PP
.Vb 2
\& #Dump the wiki to a hash
\& my %hash = $wiki\->tohash;
.Ve
.SH "SYNTAX"
.IX Header "SYNTAX"
All these attributes are object based getter/setter functions.
.PP
.Vb 1
\& $wiki\->id
.Ve
.PP
This attribute is only used for Database purposes.
.PP
.Vb 1
\& $wiki\->name
.Ve
.PP
This attribute sets the filename of this page. For example 'Leonardo Da Vinci'.
.PP
.Vb 1
\& $wiki\->body
.Ve
.PP
This attribute defines the actual page wiki.
.PP
.Vb 1
\& $wiki\->modified
.Ve
.PP
This attribute will contain the last modification date of this page.
.PP
.Vb 1
\& $wiki\->owner
.Ve
.PP
This attribute will contain the owner name of the page. This is used for the access permissions.
.PP
.Vb 1
\& $wiki\->usergroup
.Ve
.PP
This attribute will contain the usergroup. This is used for the access permissions.
.PP
.Vb 1
\& $wiki\->permissions
.Ve
.PP
This attribute contains the bitmasks of the permissions for both the usergroup and the world. This bit similar to the \s-1UNIX\s0 style permissions, except that the owner permissions are set to all access.
.PP
.Vb 1
\& $wiki\->default
.Ve
.PP
This method returns the default values for the page. This can be used to capture any invalid instances.
.SH "VERSION"
.IX Header "VERSION"
This is spine 1.1.
.SH "AUTHOR"
.IX Header "AUTHOR"
Hendrik Van Belleghem \- b e a t n i k   a t   u s e r s  d o t  s f  d o t  n e t
.SH "LICENSE"
.IX Header "LICENSE"
\&\s-1SPINE\s0 is distributed under the \s-1GNU\s0 General Public License.
.PP
Read \s-1LICENSE\s0 for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SPINE::*
.PP
Apache::SPINE::*
.PP
Apache::Request
.PP
Apache::Cookie
.PP
http://spine.sf.net
